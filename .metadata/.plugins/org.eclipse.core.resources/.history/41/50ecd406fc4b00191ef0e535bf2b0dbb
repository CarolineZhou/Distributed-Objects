import static java.lang.System.out;

import org.jdom2.*;
import java.lang.reflect.*;
import java.util.*;
public class Deserializer {
	Class currentClass;
	Object currentObject;
	Element currentRoot;
	Element classHolder;
	Constructor constructor;
	Method meth;
	HashMap<Integer,Object> hashMap = new HashMap<Integer,Object>();

	public Deserializer(Document doc) throws NoSuchMethodException, SecurityException {
		currentRoot = doc.getRootElement();
		List<Element> elements = currentRoot.getChildren();
		
		//get the class of the object
		for(int i = 0; i < elements.size(); i++)
		{
			classHolder = elements.get(i);
			Attribute objAttr = classHolder.getAttribute("class");
			String objAttrName = classHolder.getAttributeValue(objAttr.getName());
			System.out.println("Attribute: "+ objAttr);
			System.out.println("Attribute name: " + objAttrName);
			
			try {
				currentClass = Class.forName(objAttrName);
			} catch(ClassNotFoundException e) {
				e.printStackTrace();
			}
			
			listChildren(currentRoot, 0);
			
			createInstance(classHolder);
			
			
		}
		
			
	}
	
	
	public void createInstance(Element el) throws NoSuchMethodException, SecurityException {

		Constructor[] constt = currentClass.getDeclaredConstructors();
		Parameter[] params=null;
		if(currentClass.getDeclaredConstructors().length>0)
		{
			Class[] cArg =null;
			for(Constructor c : constt) {
				cArg = new Class[c.getParameterCount()]; 		

				params = c.getParameters();
				int i=0;
				for(Parameter p:params) {
					cArg[i] = p.getType(); 		
					i++;
				}
			}
			constructor = currentClass.getDeclaredConstructor(cArg);
		}
		else {

			try {			
				constructor = currentClass.getDeclaredConstructor();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			}
		}

		try {
			Object[] args = new Object[constructor.getParameterCount()];
			
			for(int i=0; i<constructor.getParameterCount();i++) {
				
				Element fld = classHolder.getChild(params[i].getName());
				if(fld.getAttributeValue("Type")=="int") {
					args[i]=Integer.valueOf(fld.getText());
				}
				else
					args[i] = fld.getText();
			}

			currentObject = constructor.newInstance(args[0],args[1]);

		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			out.println("handle 3 called");
			e.printStackTrace();
		}

		invokeMethod();

	}
	
	public void invokeMethod()
	{
		try {
			meth = currentClass.getMethod("priceCode");

			meth.setAccessible(true);
			Object o = meth.invoke(currentObject);
			out.format("%s() returned %d", meth.getName(), (int) o);

			// Handle any exceptions thrown by method to be invoked.
		} catch (InvocationTargetException x) {
			x.printStackTrace();	
		} catch (IllegalAccessException x) {
			x.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
	}
	
	public static void listChildren(Element current, int depth) {

		printSpaces(depth);
		System.out.println(current.getName());
		List children = current.getChildren();
		Iterator iterator = children.iterator();
		while (iterator.hasNext()) {
			Element child = (Element) iterator.next();
			listChildren(child, depth+1);
		}
	}
	
	private static void printSpaces(int n) {

		for (int i = 0; i < n; i++) {
			System.out.print(' '); 
		}

	}
	
}
