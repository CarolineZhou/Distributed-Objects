import org.jdom2.*;
import org.jdom2.output.XMLOutputter;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Collection;


public class Serializer {
	private Class currentClass;
	private Object currentObject;
	private Element rootElement;
	private Element currentRoot;
	private Element classHolder;
	
	// SERIALIZE object passed in, and produce an XML
	public Document serialize(Object objectCreator)
	{
		Element root = new Element("Desesialized");
		
		rootElement = root;
		
		//Create root element first
		
		for(int i = 0; i < ObjectCreator.objects.length; i++)
		{
			if(ObjectCreator.objects[i] == null) break;
			this.accessClass(ObjectCreator.objects[i], root);
		}
		//then create object one by one
		
		
		DocType type = new DocType("Deserialized");
		Document doc = new Document(root, type);

		// serialize with two space indents and extra line breaks
		try {
			XMLOutputter serializerr = new XMLOutputter();
			serializerr.output(doc, System.out);				 //or use System.out
			serializerr.output(doc, Main.fos);				 
		}
		catch (IOException e) {
			System.err.println(e);
		}
		return null;
	}
	
	private void accessClass(Object obj, Element root)
	{	
		currentClass = obj.getClass();
		currentRoot = root;
		currentObject = obj;
		
		this.serializeClass();
		
		
	}

	private void serializeClass() 
	{
		
		classHolder = new Element("object");
		
		int id = currentObject.hashCode();
		classHolder.setAttribute("id", String.valueOf(id) );
		classHolder.setAttribute("class", currentClass.getName());
		
		if(currentClass.getDeclaredFields().length > 0)
		{
			System.out.println("Found Fields");
			this.serializeFields();
		}
		
		currentRoot.addContent(classHolder);
	}
	
	private void serializeFields()
	{
		Field[] fields = currentClass.getDeclaredFields();
		System.out.println("This class has " + fields.length + " fields.");
		for(Field f : fields) 
		{
			System.out.println("Adding field info");
			f.setAccessible(true);
			
			Element fieldElement = new Element("field");
			
			if(f.getType().isPrimitive())
			{
				try {
					System.out.println("Primitive type");
					
					fieldElement.setAttribute("declaringclass", f.getDeclaringClass().toString());
					fieldElement.setAttribute("Name", f.getName());
					fieldElement.addContent(new Element("value").setText(String.valueOf(f.getInt(currentObject))));
					classHolder.addContent(fieldElement);
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}else if(f.getType().isArray())
			{
				System.out.println("Array type");
			
				fieldElement.setAttribute("Name", f.getName());
				//classHolder.addContent(fieldElement);
				//store current class info
				Class previousClass = currentClass;
				Object previousObject = currentObject;
				Element previousRootElement = rootElement;
				Element previousRoot = currentRoot;
				Element previousClassHolder = classHolder;
				
				//serialize array info
				Object arrObj = null;
				try {
					arrObj = f.get(currentObject);
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				int id = arrObj.hashCode();
				
				//Element arrayElement = new Element("object");
				
				
				if(arrObj.getClass().getTypeName().compareTo("int[]") == 0)
				{
					System.out.println("Integer array");
					Element arrayElement;
					fieldElement.addContent(arrayElement = new Element("object").setAttribute("length", "10").setAttribute("id", String.valueOf(id))
							.setAttribute("class", f.getType().getName()));
					for(int i = 0; i < 10; i++)
					{
						int amount = ((Library) previousObject).getDonation(i);
						Element ele;
						arrayElement.addContent(ele = new Element("value").addContent(String.valueOf(amount)));
					}
					
				}else if(arrObj.getClass().getTypeName().compareTo("Book[]") == 0)
				{
					System.out.println("Book Object array");
					for(int i = 0; i<10;i++)
					{
						this.accessClass(((Library) previousObject).getBook(i), fieldElement);
					}
				}
				previousClassHolder.addContent(fieldElement);
				// retrive previous class info
				currentClass = previousClass;
				currentObject = previousObject;
				rootElement = previousRootElement;
				currentRoot = previousRoot;
				classHolder = previousClassHolder;
				
				
			}else if(Collection.class.isAssignableFrom(f.getType()))
			{
				System.out.println("Collection object");
				Class previousClass = currentClass;
				Object previousObject = currentObject;
				Element previousRootElement = rootElement;
				Element previousRoot = currentRoot;
				Element previousClassHolder = classHolder;
				
				Object obj = null;
				try {
					obj = f.get(previousObject);
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				int id = obj.hashCode();
				
				fieldElement.setAttribute("Name", f.getName());

				Element collectionElement;
				System.out.println("Collection");
				fieldElement.addContent(collectionElement = new Element("object").setAttribute("length", "5").setAttribute("id", String.valueOf(id))
							.setAttribute("class", f.getType().getName()));
				for(int i = 0; i < 5; i++)
				{
					String amount = ((Library) previousObject).getEmployees(i);
					Element ele;
					collectionElement.addContent(ele = new Element("collection").addContent(amount));
				}
				
				previousClassHolder.addContent(fieldElement);
				
				currentClass = previousClass;
				currentObject = previousObject;
				rootElement = previousRootElement;
				currentRoot = previousRoot;
				classHolder = previousClassHolder;
				
			}else {
				Class previousClass = currentClass;
				Object previousObject = currentObject;
				Element previousRootElement = rootElement;
				Element previousRoot = currentRoot;
				Element previousClassHolder = classHolder;
				
				System.out.println("Field is object!");
				fieldElement.setAttribute("Name", f.getName());
				previousClassHolder.addContent(fieldElement);
				this.accessClass(currentObject, fieldElement);
				
				currentClass = previousClass;
				currentObject = previousObject;
				rootElement = previousRootElement;
				currentRoot = previousRoot;
				classHolder = previousClassHolder;
			}
		}
		
	}
}
